projectRMD[[tmpProject[j]]][(dateStart+1):(dateEnd-1)])
}
newDate <- FALSE
}
}
header <- c('---',
paste0('title: "',title,'"'),
paste0('author: "',author,'"'),
'output:',
'  html_document:',
'      toc: true',
'      toc_depth: 4',
'      toc_float:',
'        toc_collapsed: true',
'number_sections: false',
'theme: lumen',
'df_print: paged',
'code_folding: hide',
'---',
'',
'```{r setup, include=FALSE}',
'knitr::opts_chunk$set(echo = TRUE,',
'                      eval = FALSE)',
'```')
labBook.out <- c(header,labBook.out)
fileConn <- file(file.path(labBook, "labBook.complete.Rmd"))
writeLines(labBook.out, fileConn)
close(fileConn)
rmarkdown::render(file.path(labBook, "labBook.complete.Rmd"))
}
createLabBook("/home/fischuu/git/LabBook/")
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL, title="My LabBook", author="Daniel Fischer"){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projectRMD <- list()
availDates <- structure(list(), class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
# Unique and sort the dates
availDates <- unique(availDates)
availDates <- availDates[order(availDates, decreasing=TRUE)]
# Now concatenate the progress entries based on the timestamps
labBook.out <- c()
for(i in 1:length(availDates)){
# Find projects with that particular timestamp and loop through them
tmpProject <- grep(availDates[i], projectRMD)
newDate <- TRUE
for(j in 1:length(tmpProject)){
dateStart <- grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
otherDates <- grep("## ", projectRMD[[tmpProject[j]]])
dateEnd <- otherDates[min(which(otherDates==dateStart)+1, length(otherDates))]
if(newDate){
headLine <- c(paste0("# ", gsub("## ", "",projectRMD[[tmpProject[j]]][dateStart])),paste0("## ", gsub(".Rmd","",projects[tmpProject[j]])))
} else {
headLine <- paste0("## ", gsub(".Rmd","",projects[tmpProject[j]]))
}
if(dateStart==dateEnd){
labBook.out <- c(labBook.out, headLine, projectRMD[[tmpProject[j]]][(dateStart+1):length(projectRMD[[tmpProject[j]]])])
} else {
labBook.out <- c(labBook.out, headLine,
projectRMD[[tmpProject[j]]][(dateStart+1):(dateEnd-1)])
}
newDate <- FALSE
}
}
header <- c('---',
paste0('title: "',title,'"'),
paste0('author: "',author,'"'),
'output:',
'  html_document:',
'      toc: true',
'      toc_depth: 4',
'      toc_float:',
'        toc_collapsed: true',
'number_sections: false',
'theme: lumen',
'df_print: paged',
'code_folding: hide',
'---',
'',
'```{r setup, include=FALSE}',
'knitr::opts_chunk$set(echo = TRUE,',
'                      eval = FALSE)',
'```')
labBook.out <- c(header,labBook.out)
fileConn <- file(file.path(labBook, "labBook.complete.Rmd"))
writeLines(labBook.out, fileConn)
close(fileConn)
rmarkdown::render(file.path(labBook, "labBook.complete.Rmd"))
}
createLabBook("/home/fischuu/git/LabBook/")
debug(createLabBook)
createLabBook("/home/fischuu/git/LabBook/")
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL, title="My LabBook", author="Daniel Fischer"){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projectRMD <- list()
availDates <- structure(list(), class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
# Unique and sort the dates
availDates <- unique(availDates)
availDates <- availDates[order(availDates, decreasing=TRUE)]
# Now concatenate the progress entries based on the timestamps
labBook.out <- c()
for(i in 1:length(availDates)){
# Find projects with that particular timestamp and loop through them
tmpProject <- grep(availDates[i], projectRMD)
newDate <- TRUE
for(j in 1:length(tmpProject)){
dateStart <- grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
otherDates <- grep("## ", projectRMD[[tmpProject[j]]])
dateEnd <- otherDates[min(which(otherDates==dateStart)+1, length(otherDates))]
if(newDate){
headLine <- c(paste0("# ", gsub("## ", "",projectRMD[[tmpProject[j]]][dateStart])),paste0("## ", gsub(".Rmd","",projects[tmpProject[j]])))
} else {
headLine <- paste0("## ", gsub(".Rmd","",projects[tmpProject[j]]))
}
if(dateStart==dateEnd){
labBook.out <- c(labBook.out, headLine, projectRMD[[tmpProject[j]]][(dateStart+1):length(projectRMD[[tmpProject[j]]])])
} else {
labBook.out <- c(labBook.out, headLine,
projectRMD[[tmpProject[j]]][(dateStart+1):(dateEnd-1)])
}
newDate <- FALSE
}
}
header <- c('---',
paste0('title: "',title,'"'),
paste0('author: "',author,'"'),
'output:',
'  html_document:',
'      toc: true',
'      toc_depth: 4',
'      toc_float:',
'        toc_collapsed: true',
'number_sections: false',
'theme: lumen',
'df_print: paged',
'code_folding: hide',
'---',
'',
'```{r setup, include=FALSE}',
'knitr::opts_chunk$set(echo = TRUE,',
'                      eval = FALSE)',
'```')
labBook.out <- c(header,labBook.out)
fileConn <- file(file.path(labBook, ".labBook.complete.Rmd"))
writeLines(labBook.out, fileConn)
close(fileConn)
rmarkdown::render(file.path(labBook, ".labBook.complete.Rmd"))
}
createLabBook("/home/fischuu/git/LabBook/")
createLabBook("/home/fischuu/git/LabBook/")
createLabBook("/home/fischuu/git/LabBook/")
?listFiles
?list.files
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL, title="My LabBook", author="Daniel Fischer"){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projects <- projects[-which(projects=="labBook.complete.Rmd")]
projectRMD <- list()
availDates <- structure(list(), class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
# Unique and sort the dates
availDates <- unique(availDates)
availDates <- availDates[order(availDates, decreasing=TRUE)]
# Now concatenate the progress entries based on the timestamps
labBook.out <- c()
for(i in 1:length(availDates)){
# Find projects with that particular timestamp and loop through them
tmpProject <- grep(availDates[i], projectRMD)
newDate <- TRUE
for(j in 1:length(tmpProject)){
dateStart <- grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
otherDates <- grep("## ", projectRMD[[tmpProject[j]]])
dateEnd <- otherDates[min(which(otherDates==dateStart)+1, length(otherDates))]
if(newDate){
headLine <- c(paste0("# ", gsub("## ", "",projectRMD[[tmpProject[j]]][dateStart])),paste0("## ", gsub(".Rmd","",projects[tmpProject[j]])))
} else {
headLine <- paste0("## ", gsub(".Rmd","",projects[tmpProject[j]]))
}
if(dateStart==dateEnd){
labBook.out <- c(labBook.out, headLine, projectRMD[[tmpProject[j]]][(dateStart+1):length(projectRMD[[tmpProject[j]]])])
} else {
labBook.out <- c(labBook.out, headLine,
projectRMD[[tmpProject[j]]][(dateStart+1):(dateEnd-1)])
}
newDate <- FALSE
}
}
header <- c('---',
paste0('title: "',title,'"'),
paste0('author: "',author,'"'),
'output:',
'  html_document:',
'      toc: true',
'      toc_depth: 4',
'      toc_float:',
'        toc_collapsed: true',
'number_sections: false',
'theme: lumen',
'df_print: paged',
'code_folding: hide',
'---',
'',
'```{r setup, include=FALSE}',
'knitr::opts_chunk$set(echo = TRUE,',
'                      eval = FALSE)',
'```')
labBook.out <- c(header,labBook.out)
fileConn <- file(file.path(labBook, "labBook.complete.Rmd"))
writeLines(labBook.out, fileConn)
close(fileConn)
rmarkdown::render(file.path(labBook, "labBook.complete.Rmd"))
}
createLabBook("/home/fischuu/git/LabBook/")
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL, title="My LabBook", author="Daniel Fischer"){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projects <- projects[-which(projects=="labBook.complete.Rmd")]
projectRMD <- list()
availDates <- structure(list(), class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
# Unique and sort the dates
availDates <- unique(availDates)
availDates <- availDates[order(availDates, decreasing=TRUE)]
# Now concatenate the progress entries based on the timestamps
labBook.out <- c()
for(i in 1:length(availDates)){
# Find projects with that particular timestamp and loop through them
tmpProject <- grep(availDates[i], projectRMD)
newDate <- TRUE
for(j in 1:length(tmpProject)){
dateStart <- grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
otherDates <- grep("## ", projectRMD[[tmpProject[j]]])
dateEnd <- otherDates[min(which(otherDates==dateStart)+1, length(otherDates))]
if(newDate){
headLine <- c(paste0("# ", gsub("## ", "",projectRMD[[tmpProject[j]]][dateStart])),paste0("## ", gsub(".Rmd","",projects[tmpProject[j]])))
} else {
headLine <- paste0("## ", gsub(".Rmd","",projects[tmpProject[j]]))
}
if(dateStart==dateEnd){
labBook.out <- c(labBook.out, headLine, projectRMD[[tmpProject[j]]][(dateStart+1):length(projectRMD[[tmpProject[j]]])])
} else {
labBook.out <- c(labBook.out, headLine,
projectRMD[[tmpProject[j]]][(dateStart+1):(dateEnd-1)])
}
newDate <- FALSE
}
}
header <- c('---',
paste0('title: "',title,'"'),
paste0('author: "',author,'"'),
'output:',
'  html_document:',
'      toc: true',
'      toc_depth: 4',
'      toc_float:',
'        toc_collapsed: true',
'number_sections: false',
'theme: lumen',
'df_print: paged',
'code_folding: hide',
'---',
'',
'```{r setup, include=FALSE}',
'knitr::opts_chunk$set(echo = TRUE,',
'                      eval = FALSE)',
'```')
labBook.out <- c(header,labBook.out)
fileConn <- file(file.path(labBook, "labBook.complete.Rmd"))
writeLines(labBook.out, fileConn)
close(fileConn)
rmarkdown::render(file.path(labBook, "labBook.complete.Rmd"))
}
createLabBook("/home/fischuu/git/LabBook/")
debug(createLabBook)
createLabBook("/home/fischuu/git/LabBook/")
projects
createLabBook("/home/fischuu/git/LabBook/")
projects
projects=="labBook.complete.Rmd"
which(projects=="labBook.complete.Rmd")
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL, title="My LabBook", author="Daniel Fischer"){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
if(length(which(projects=="labBook.complete.Rmd"))>0) projects <- projects[-which(projects=="labBook.complete.Rmd")]
projectRMD <- list()
availDates <- structure(list(), class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
# Unique and sort the dates
availDates <- unique(availDates)
availDates <- availDates[order(availDates, decreasing=TRUE)]
# Now concatenate the progress entries based on the timestamps
labBook.out <- c()
for(i in 1:length(availDates)){
# Find projects with that particular timestamp and loop through them
tmpProject <- grep(availDates[i], projectRMD)
newDate <- TRUE
for(j in 1:length(tmpProject)){
dateStart <- grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
otherDates <- grep("## ", projectRMD[[tmpProject[j]]])
dateEnd <- otherDates[min(which(otherDates==dateStart)+1, length(otherDates))]
if(newDate){
headLine <- c(paste0("# ", gsub("## ", "",projectRMD[[tmpProject[j]]][dateStart])),paste0("## ", gsub(".Rmd","",projects[tmpProject[j]])))
} else {
headLine <- paste0("## ", gsub(".Rmd","",projects[tmpProject[j]]))
}
if(dateStart==dateEnd){
labBook.out <- c(labBook.out, headLine, projectRMD[[tmpProject[j]]][(dateStart+1):length(projectRMD[[tmpProject[j]]])])
} else {
labBook.out <- c(labBook.out, headLine,
projectRMD[[tmpProject[j]]][(dateStart+1):(dateEnd-1)])
}
newDate <- FALSE
}
}
header <- c('---',
paste0('title: "',title,'"'),
paste0('author: "',author,'"'),
'output:',
'  html_document:',
'      toc: true',
'      toc_depth: 4',
'      toc_float:',
'        toc_collapsed: true',
'number_sections: false',
'theme: lumen',
'df_print: paged',
'code_folding: hide',
'---',
'',
'```{r setup, include=FALSE}',
'knitr::opts_chunk$set(echo = TRUE,',
'                      eval = FALSE)',
'```')
labBook.out <- c(header,labBook.out)
fileConn <- file(file.path(labBook, "labBook.complete.Rmd"))
writeLines(labBook.out, fileConn)
close(fileConn)
rmarkdown::render(file.path(labBook, "labBook.complete.Rmd"))
}
createLabBook("/home/fischuu/git/LabBook/")
createLabBook("/home/fischuu/git/LabBook/")
library(LabBookR)
devtools::document()
rm(list = c("createLabBook"))
devtools::document()
devtools::document()
devtools::document()
library(LabBookR)
library(LabBookR)
?render
devtools::document()
library(LabBookR)
devtools::document()
library(LabBookR)
devtools::document()
library(LabBookR)
devtools::document()
library(LabBookR)
devtools::document()
library(LabBookR)
devtools::document()
library(LabBookR)
library(LabBookR)
devtools::document()
library(LabBookR)
date("2021-12-12")
as.date("2021-12-12")
as.Date("2021-12-12")
as.character(as.Date("2021-12-12"))
as.character(as.Date("2021-12-12"))
devtools::document()
library(LabBookR)
library(LabBookR)
devtools::document()
library(LabBookR)
library(LabBookR)
devtools::document()
library(LabBookR)
devtools::document()
library(LabBookR)
library(LabBookR)
library(LabBookR)
library(LabBookR)
library(LabBookR)
library(LabBookR)
library(LabBookR)
library(LabBookR)
devtools::document()
library(LabBookR)
library(LabBookR)
