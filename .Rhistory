order(tmp)
lapply(tmp, order)
unlist(tmp)
tmp
tmp[[1]]
lapply(tmp,c)
sapply(tmp,"[")
sapply(tmp,"[",1)
unlist(tmp)
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projectRMD <- list()
availDates <- c()
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
availDates <- unique(availDates)
availDates
}
createLabBook("/home/fischuu/git/LabBook/")
createLabBook("/home/fischuu/git/LabBook/")
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projectRMD <- list()
availDates <- structure(NA, class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
availDates <- unique(availDates)
availDates
}
createLabBook("/home/fischuu/git/LabBook/")
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projectRMD <- list()
availDates <- structure(NULL, class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
availDates <- unique(availDates)
availDates
}
createLabBook("/home/fischuu/git/LabBook/")
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projectRMD <- list()
availDates <- structure(list(), class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
availDates <- unique(availDates)
availDates
}
createLabBook("/home/fischuu/git/LabBook/")
order(createLabBook("/home/fischuu/git/LabBook/"))
tmp <- createLabBook("/home/fischuu/git/LabBook/")
tmp[order[tmp]]
tmp[order(tmp)
]
tmp[order(tmp, rev=TRUE)]
?order
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projectRMD <- list()
availDates <- structure(list(), class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
# Unique and sort the dates
availDates <- unique(availDates)
availDates <- availDates[order(availDates, decreasing=TRUE)]
availDates
}
createLabBook("/home/fischuu/git/LabBook/")
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projectRMD <- list()
availDates <- structure(list(), class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
# Unique and sort the dates
availDates <- unique(availDates)
availDates <- availDates[order(availDates, decreasing=TRUE)]
# Now concatenate the progress entries based on the timestamps
for(i in 1:length(availDates)){
# Find projects with that particular timestamp and loop through them
tmpProject <- grep(availDates[i], projectRMD)
for(j in 1:length(tmpProject)){
grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
}
}
availDates
}
debug(createLabBook)
createLabBook("/home/fischuu/git/LabBook/")
createLabBook("/home/fischuu/git/LabBook/")
tmpProject
grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
projectRMD
projectRMD[[j]]
grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
tmpProject
j
projectRMD[[5]]
grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
dateStart <- grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
otherDates <- grep("## ", projectRMD[[tmpProject[j]]])
otherDate
otherDates
dateStart
which(otherDates==dateStart)+1
otherDates[min(which(otherDates==dateStart)+1, length(otherDates)]
}
}
availDates
}
debug(createLabBook)
createLabBook("/home/fischuu/git/LabBook/")
undebug(createLabBook)
#' Create Project Report
#'
#' Create a project report
#' @param project Project name
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown dfile
#' @export
createProjectReport <- function(project=NULL, labBook=NULL){
# Input checks
if(is.null(project)) stop("Please define a project.")
if(is.null(labBook)) stop("Please provide a labBook address")
rmarkdown::render(file.path(labBook,paste0(project,".Rmd")))
}
#' Create a new project
#'
#' This function creates a new project
#' @param title Name of the project
#' @param folder Path to LabBookR folder
#' @param author Name of the project report author
#' @return A blank project file
#' @export
createNewProject <- function(title, folder, author){
blankProject <- c(
'---',
paste0('title: "',title,'"'),
paste0('author: "',author,'"'),
'output:',
'  html_document:',
'  toc: true',
'  toc_depth: 4',
'  toc_float:',
'    toc_collapsed: true',
'number_sections: false',
'theme: lumen',
'df_print: paged',
'code_folding: hide',
'---',
'',
'```{r setup, include=FALSE}',
'knitr::opts_chunk$set(echo = TRUE,',
'                      eval = FALSE)',
'```',
'```{}',
'# Instructions to enter ToDo-list items',
'# Follow the format:',
'@ IncomingDate @ DueDate @ PlannedDate @ RequiredTime @ Ready @ Description',
'@ YYYY.MM.DD @ YYYY.MM.DD @ YYYY.MM.DD @ h:mm @ logical @ Free text',
'',
'# Subprojects, just intent 4 whitespaces like this:',
'@ YYYY.MM.DD @ YYYY.MM.DD @ YYYY.MM.DD @ h:mm @ TRUE/FALSE @ Main task',
'    @ YYYY.MM.DD @ YYYY.MM.DD @ YYYY.MM.DD @ h:mm @ TRUE/FALSE @ subtask',
'```',
'',
'# Project initialisation',
'[ ] Create a github repository named "Project - Title"',
'[ ] Create a CSC project named "Title"',
'[ ] Initiate Allas backup for scratch space',
'-> script can be found here:',
'[ ] Setup Luke project backup for scratch space:',
'',
'# ToDo',
'',
'# Progress Notes',
''
)
file <- paste0(gsub(" ","_",title), ".Rmd")
if(file.exists(file.path(folder, file))){
stop("Project exists already, nothing was done!")
} else {
fileConn <- file(file.path(folder, file))
writeLines(blankProject, fileConn)
close(fileConn)
}
}
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projectRMD <- list()
availDates <- structure(list(), class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
# Unique and sort the dates
availDates <- unique(availDates)
availDates <- availDates[order(availDates, decreasing=TRUE)]
# Now concatenate the progress entries based on the timestamps
for(i in 1:length(availDates)){
# Find projects with that particular timestamp and loop through them
tmpProject <- grep(availDates[i], projectRMD)
for(j in 1:length(tmpProject)){
dateStart <- grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
otherDates <- grep("## ", projectRMD[[tmpProject[j]]])
otherDates[min(which(otherDates==dateStart)+1, length(otherDates))]
}
}
availDates
}
createLabBook("/home/fischuu/git/LabBook/")
dateStart <- grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
otherDates <- grep("## ", projectRMD[[tmpProject[j]]])
dateStart
otherDates
min(which(otherDates==dateStart)+1, length(otherDates))
otherDates==dateStart
which(otherDates==dateStart)+1
length(otherDates)
min(which(otherDates==dateStart)+1, length(otherDates))
otherDates[min(which(otherDates==dateStart)+1, length(otherDates))]
projectRMD[[tmpProject[j]]][dateStart:length(projectRMD[[tmpProject[j]]])]
projects
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projectRMD <- list()
availDates <- structure(list(), class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
# Unique and sort the dates
availDates <- unique(availDates)
availDates <- availDates[order(availDates, decreasing=TRUE)]
# Now concatenate the progress entries based on the timestamps
labBook <- c()
for(i in 1:length(availDates)){
# Find projects with that particular timestamp and loop through them
tmpProject <- grep(availDates[i], projectRMD)
for(j in 1:length(tmpProject)){
dateStart <- grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
otherDates <- grep("## ", projectRMD[[tmpProject[j]]])
dateEnd <- otherDates[min(which(otherDates==dateStart)+1, length(otherDates))]
if(dateStart==dateEnd){
labBook <- c(labBook, c(projects[tmpProject], projectRMD[[tmpProject[j]]][dateStart:length(projectRMD[[tmpProject[j]]])]))
} else {
labBook <- c(labBook, c(projects[tmpProject], projectRMD[[tmpProject[j]]][dateStart:dateEnd]))
}
}
}
availDates
}
createLabBook("/home/fischuu/git/LabBook/")
#' Create Complete LabBook
#'
#' Create the lab book
#' @param labBook Path to LabBookR folder
#' @return A RMarkdown file
#' @export
createLabBook <- function(labBook=NULL){
# Input checks
if(is.null(labBook)) stop("Please provide a labBook address")
projects <- list.files(labBook, pattern="*.Rmd")
projectRMD <- list()
availDates <- structure(list(), class="Date")
# Import all projects
for(i in 1:length(projects)){
projectRMD[[i]] <- readLines(file.path(labBook, projects[i]))
}
# Filter out all non- Progress related lines
for(i in 1:length(projects)){
progressStart <- which(projectRMD[[i]]=='# Progress Notes')
progressEnd <- length(projectRMD[[i]])
if(progressStart>=progressEnd){
projectRMD[[i]] <- "NA"
} else {
projectRMD[[i]] <- projectRMD[[i]][(progressStart+1): progressEnd]
}
}
# Now get all the available dates
for(i in 1:length(projects)){
availDates <- c(availDates, as.Date(gsub("## ", "", projectRMD[[i]][grep("##", projectRMD[[i]])]), format="%Y-%m-%d"))
}
# Unique and sort the dates
availDates <- unique(availDates)
availDates <- availDates[order(availDates, decreasing=TRUE)]
# Now concatenate the progress entries based on the timestamps
labBook <- c()
for(i in 1:length(availDates)){
# Find projects with that particular timestamp and loop through them
tmpProject <- grep(availDates[i], projectRMD)
for(j in 1:length(tmpProject)){
dateStart <- grep(paste0("## ",as.character(availDates[i])), projectRMD[[tmpProject[j]]])
otherDates <- grep("## ", projectRMD[[tmpProject[j]]])
dateEnd <- otherDates[min(which(otherDates==dateStart)+1, length(otherDates))]
if(dateStart==dateEnd){
labBook <- c(labBook, c(projects[tmpProject], projectRMD[[tmpProject[j]]][dateStart:length(projectRMD[[tmpProject[j]]])]))
} else {
labBook <- c(labBook, c(projects[tmpProject], projectRMD[[tmpProject[j]]][dateStart:dateEnd]))
}
}
}
labBook
}
createLabBook("/home/fischuu/git/LabBook/")
library(LabBookR)
library(LabBookR)
library(LabBookR)
barplot(rep(10,10))
barplot(rep(10,10), col=1:10)
R.home()
library(wosliterclient)
var.database.id <- "WOS"
var.usr.query <- "WC=psychology"
var.count <- 1
var.first.record <- 1
var.lang <- 'en' # character | Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default.
var.sort.field <- 'PY+D' # character | Order by field(s). Field name and order by clause separated by '+', use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma.
#Submits a user query and returns results
api.instance <- SearchApi$new()
# Configure API key authorization: key
api.instance$apiClient$apiKeys["X-ApiKey"] <- "3fa4b45adb68559b6d05713ef360b6e755f9bd74"
result <- api.instance$RootGet(var.database.id, var.usr.query, var.count, var.first.record, lang=var.lang, sort.field=var.sort.field)
